/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Tasks from '../model/Tasks';

/**
* Tasks service.
* @module api/TasksApi
* @version 1.0.0
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createtasks operation.
     * @callback module:api/TasksApi~createtasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tasks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Tasks} tasks data to be created
     * @param {module:api/TasksApi~createtasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tasks}
     */
    createtasks(tasks, callback) {
      let postBody = tasks;
      // verify the required parameter 'tasks' is set
      if (tasks === undefined || tasks === null) {
        throw new Error("Missing the required parameter 'tasks' when calling createtasks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tasks;
      return this.apiClient.callApi(
        '/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletetasks operation.
     * @callback module:api/TasksApi~deletetasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} tasksId the Id parameter
     * @param {module:api/TasksApi~deletetasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletetasks(tasksId, callback) {
      let postBody = null;
      // verify the required parameter 'tasksId' is set
      if (tasksId === undefined || tasksId === null) {
        throw new Error("Missing the required parameter 'tasksId' when calling deletetasks");
      }

      let pathParams = {
        'tasksId': tasksId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{tasksId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlltasks operation.
     * @callback module:api/TasksApi~getAlltasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tasks>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/TasksApi~getAlltasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tasks>}
     */
    getAlltasks(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tasks];
      return this.apiClient.callApi(
        '/tasks/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gettasks operation.
     * @callback module:api/TasksApi~gettasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tasks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} tasksId the Id parameter
     * @param {module:api/TasksApi~gettasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tasks}
     */
    gettasks(tasksId, callback) {
      let postBody = null;
      // verify the required parameter 'tasksId' is set
      if (tasksId === undefined || tasksId === null) {
        throw new Error("Missing the required parameter 'tasksId' when calling gettasks");
      }

      let pathParams = {
        'tasksId': tasksId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tasks;
      return this.apiClient.callApi(
        '/tasks/{tasksId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatetasks operation.
     * @callback module:api/TasksApi~updatetasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tasks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} tasksId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Tasks} opts.tasks data to be updated
     * @param {module:api/TasksApi~updatetasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tasks}
     */
    updatetasks(tasksId, opts, callback) {
      opts = opts || {};
      let postBody = opts['tasks'];
      // verify the required parameter 'tasksId' is set
      if (tasksId === undefined || tasksId === null) {
        throw new Error("Missing the required parameter 'tasksId' when calling updatetasks");
      }

      let pathParams = {
        'tasksId': tasksId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tasks;
      return this.apiClient.callApi(
        '/tasks/{tasksId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
